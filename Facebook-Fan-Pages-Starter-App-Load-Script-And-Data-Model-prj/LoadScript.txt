///$tab Change Log
/*
0.5 - 01/09/16
--------------
* First version to work with new Qlik Web Connectors version of product and new Facebook Fan Pages Connector (which replaces what was named V2 of this connector in QVSource).
* Currently no UI, only a data model.

*/
///$tab Config
// --------------------------------------------------------------------------------------------------------
// THE FOLLOWING SHOULD BE REVIEWED BEFORE RELOADING THIS APPLICATION
// --------------------------------------------------------------------------------------------------------

//
// If you have set up remote access, this will typically be the name of the machine Qlik Web Connectors is running on.
//
let vQwcMachineName = 'localhost';
 
//
// If for some reason you have to run Qlik Web Connectors on a non standard port.
//
let vQwcPort = '5555';
 
//
// An identifier for the app - used for error logging. Should be
// unique across all Qlik Web Connectors based applications reloading on a given machine.
//
let vQwcAppId = 'Facebook_Demo';
 
//
// Used if you have setup a multi-user environment (e.g. with remote access enabled.)
//
let vQwcLoadAccessToken = '';
  
let vQwcBaseUrl = 'http://$(vQwcMachineName):$(vQwcPort)/data?appID=$(vQwcAppId)&loadAccessToken=$(vQwcLoadAccessToken)';


// ***********************************************************************
// IMPORTANT - The folder you specify here must exist and QlikView should 
// have write access to it and QVSource should have read access
// ***********************************************************************
//
// A folder which QlikView has write access to and QVSource has read access 
// to. See http://www.qvsource.com/wiki/Synchronous-Asynchronous-And-Batch-Requests-Explained.ashx 
// for more info.
//
let vWorkingFolder = 'c:\QVSource\Temp\';

//
// Edit the following table so that the left column contains the 
// FB page name or id and the right column contains a friendly name
// to be used in charts.
//
// NOTE: We would stongly recommend looking up the underlying ID for 
// the page (although we don't in the example below) for the page 
// column below rather than using the page's 'vanity url' name which 
// can sometimes change. For example, let's say you wish to analyse:
// www.facebook.com/cocacola
//
// Instead of entering 'cocacola' in the table below, enter this into the
// page name/id input in QVSource then look at the 'Page' table on the 
// Data tab. You should see in the page_id column the value 40796308305
// and this should be used for the page column in the table below.
//
// You should read the docs here:
// http://www.qvsource.com/wiki/Facebook-Pages-Connector-for-QlikView.ashx#Facebook_Name_or_Page_Id_0
// when working out what to enter for the page field.
//
// If applicable, the first row should be your own company's page (it is used to set the 
// vCompany variable which may be used to highlight lines in certain charts in the future).
//
FacebookSites:
LOAD * INLINE [
page, Site
cocacola, Cocacola
pepsi, Pepsi
];

//
// The first time the app is loaded (i.e. when there are no saved QVD files) it will go back from 
// the current day this many days and retrieve all the feed items. Note that if the facebook fan 
// page has a lot of activity then it can be very slow to load the further back you set this.
//
let vNoDaysToGoBackOnInitialReload = 30;

//
// After the first reload (i.e. when there are some saved QVD files) we still want to go back a short 
// time to pick up any new comments, likes etc. for posts that may have changed since the previous loads.
// This variable sets how many days we go back refeshing feed items and associated comments for.
//
let vNoDaysToGoBackOnSubsequentReloads = 5;

//
// There could be hundreds of comments on each facebook post - this value sets the maximumn number of comments
// to retrieve per post. Note that the more you retrieve the slower the reload will be.
//
// Please note that the data for each feed item actually contains a field with the total number of comments for the 
// post which can be used for charting so unless you actually require the text, like count and other comment specific 
// text you could set this to 0.
//
let vNoOfCommentsToLoadPerFeedItem = 10;

//
// Changes to the Facebook API means that the comment count for a feed item now needs to be extracted using 
// a separate table and API call - one for each item. This is very costly in terms of API calls and we 
// currently recommend turning this off.
//
let vLoadCommentCountForFeedItems = 1;

//
// Changes to the Facebook API means that the like count for a feed item now needs to be extracted using 
// a separate table and API call - one for each item. This is very costly in terms of API calls and we 
// currently recommend turning this off.
//
let vLoadLikeCountForFeedItems = 1;

//
// Configure this table with one or more of the following sentiment APIs:
//
// Repustate
// Sentiment140
// AlchemyAPI
// Random
//
// * NOT SUPPORTED IN THIS VERSION (1.8.5+ OF QVW / 1.4.0.4+ OF QVSOURCE)) We will endeavour to add support back for these 
// soon but it should be straightforward to adjust the load script to support these.
//
// BREAKING CHANGE: Please note that Sentimental (formally Chatterbox) have removed their API from Mashape. As such
// this sentiment API engine is longer supported and you should switch to an alternative.
//
// NOTE:
// - You may need to ensure you have API keys configured in QVSource for the selections you make here with 
// enough quota to be able to score all the content.
// - The QVSource Sentiment Analysis & Text Analytics Connector also connects to other APIs which you can 
// of course also use however you would need to modify the load script accordingly.
//
//SentimentAPIs:
//LOAD * INLINE [
//SentimentAPI
//Random
//];

// Repustate

//
// Enter something like: GMT, GMT-01:00, GMT+04:00 etc. here.
//
// If this does not work try something like: UTC, UTC+01:00 etc.
//
let vLocalTimeZone = 'UTC';

// --------------------------------------------------------------------------------------------------------
// THE FOLLOWING ARE INTENDED FOR ADVANCED USE ONLY
// --------------------------------------------------------------------------------------------------------

let vUseAsyncWherePossible = 1;
let vAsyncSentiment = vUseAsyncWherePossible; // should be 0 or 1.
let vAsyncComments = vUseAsyncWherePossible; // should be 0 or 1.

// let vAsyncKey = hash128(documentpath()) & '_FacebookApp'; no longer needed/used.

//
// Set a default to email address at the application level.
//
// IMPORTANT - If you do set this you should also setup details of an SMTP
// account in the notifier connector.
//

//
// By default the application will not attempt to download additional profile data on all users who 
// have written a post or commented on a post.
//
// The main advantage of turning this on is that you will get additional data for all the posters and 
// commenters in the data set. HOWEVER users generally have very little information publicly available 
// and likely the only additional information you will get by turning this on is their gender and locale 
// and getting these will GREATLY increase the load time.
//
// With this turned off only a couple of gender and locale related charts in the demo app will not be 
// available.
//
// *****************************************************
// PLEASE NOTE THAT THIS IS NO LONGER SUPPORTED - IT
// SEEMS FACEBOOK HAVE REMOVED GENDER AND LOCATION FROM 
// THE RESPONSE
//
let vLoadPostersAndCommenterInfo = 0; // SHOULD BE 0 NOW
let vLoadPostersAndCommenterInfoAsync = vUseAsyncWherePossible; // should be 0 or 1.
// *****************************************************

//
// This should be used during debugging only. It will prevent the cache of comments for feed items and the
// details for a page from being cleared and should significantly improve reload time however it will no 
// longer be retrieving new data!
//
let vClearCacheBeforeReload = 1;

//
// Whether to delete temporary tables used during the load process. It is recommended that you leave this 
// set to 1 unless you have some issues with the application or wish to understand it better.
//
let vDeleteTempTables = 1;

//
// Could set this to false for debugging (would be faster to retrieve 
// results but they might be out of date).
//
let vIgnoreCache = 'true';
	    
//
// If the has_at_least_this_many_likes value is less than or equal to this we assume this is 
// the actual like count. If it is greater than this we make extra table requests (and therefore 
// API calls) to establish correct number.
//
// NOTE - This should probably be set as 24 unless otherwise stated.
let vLikeCountThreshold = 24;

// Same as above but for comments.
let vCommentCountThreshold = 24;
///$tab Setup
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='£#,##0.00;-£#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

set errormode = 0;

// Let's make the first company in the list that of the company 
// running the analysis.
let vCompany = PEEK('Company', 0, 'FacebookSites');

let vtemp = Date(timestamp(now(1)) - vNoDaysToGoBackOnInitialReload);
let vOldestFeedCreatedDateForInitialReload = Date(vtemp, 'DD-MM-YYYY');
let vtemp = Date(timestamp(now(1)) - vNoDaysToGoBackOnSubsequentReloads);
let vOldestFeedCreatedDateForSubsequentReloads = Date(vtemp, 'DD-MM-YYYY');

let vCompany = peek('Site', 0,'FacebookSites');

let vTestvLocalTimeZone = ConvertToLocalTime(UTC(), '$(vLocalTimeZone)');

if (right(vTestvLocalTimeZone, 1) = '?') then
	trace 'Your setting for vLocalTimeZone in the config file is not recognised as valid';
	exit script;
end if



///$tab QWC Support
/*****************************************************************
/ Standard QVSource library
/ http://www.QVSource.com
*****************************************************************/

let vNow = now(1); // 1=at time of function call
// let vDay = day(vNow);
// let vYear = year(vNow);
// let vHour = hour(vToday);
// let vMonth = month(vNow);
// let vTodayAsDate = makedate(vYear, vMonth, vDay);
// let vLocalReloadTime = date(ConvertToLocalTime(gmt(), '$(vLocalTimeZone)'), 'DD/MM/YYYY hh:mm');
///$tab FacebookPages
let fb_pro_pages = 'FB_Page.qvd';

let size = filesize('$(fb_pro_pages)');

if not isnull(size) then
	FB_Page:
	LOAD * FROM '$(fb_pro_pages)' (qvd);
end if


LET noRows = NoOfRows('FacebookSites'); // get the total number of rows in the table
   
for i=0 to $(noRows)-1 // loop through every row

	let page = peek('page', $(i), 'FacebookSites'); // get the value for "text" field on each row
	
	let vUrl = '$(vQwcBaseUrl)&connectorID=FacebookFanPagesConnector&table=Page&pageId=$(page)';
	trace 'About to run $(vUrl)';
	
	FB_Page:
	LOAD
		'$(page)' as page,
	    status as Page_status,
	    id as Page_id,
	    about as Page_about,
	    category as Page_category,
	    company_overview as Page_company_overview,
	    description as Page_description,
	    founded as Page_founded,
	    general_info as Page_general_info,
	    link as Page_link,
	    mission as Page_mission,
	    name as Page_name,
	    products as Page_products,
	    username as Page_username,
	    website as Page_website,
	    likes as Page_likes,
	    talking_about_count as Page_talking_about_count,
	    picture_url as Page_picture_url
	FROM
	[$(vUrl)]
	(qvx);
	// IMPORTANT: If, when loading the above script, you receive a 'Script Error' Dialog box with a 'Field Not Found'
	// (or other) error, the first thing you should do is copy and paste the full request URL (i.e. the URL between the square [...]
	// brackets IN THE QLIKVIEW / QLIK SENSE SCRIPT ERROR DIALOG) into a browser address bar and check the response.
		
next

STORE FB_Page INTO '$(fb_pro_pages)';
///$tab Facebook Feed
temp_pagesID:   
load 
	page, 
	Page_id as page_id, 
	sum(Page_likes) 
resident FB_Page 
group by page, Page_id;

drop table FB_Page;

let fb_pro_feed = 'FB_Feed.qvd';

let size_fb_pro_feed = filesize('$(fb_pro_feed)');

if isnull(size_fb_pro_feed) then
	let vIsFirstTime = 1;
ELSE
	let vIsFirstTime = 0; // If this file is present then the script has run before.
end if

LET noRows = NoOfRows('temp_pagesID');
   
for i=0 to $(noRows)-1

	let page = peek('page', $(i), 'temp_pagesID');
    let pageID = peek('page_id', $(i), 'temp_pagesID');
       		
    if(vIsFirstTime=1) then
		let vUrl = '$(vQwcBaseUrl)&connectorID=FacebookFanPagesConnector&table=Feed&pageId=$(pageID)&startDate=$(vOldestFeedCreatedDateForInitialReload)';
    else
	    let vUrl = '$(vQwcBaseUrl)&connectorID=FacebookFanPagesConnector&table=Feed&pageId=$(pageID)&startDate=$(vOldestFeedCreatedDateForSubsequentReloads)';
    endif
    
	trace 'About to run $(vUrl)';

	FB_Feed:
	LOAD
		'$(page)' as page,
	    id as FeedItem_id,
	    from_id as Feed_from_id,
	    caption as Feed_caption,
	    created_time as Feed_created_time,
	    timestamp#(mid(created_time, 1, 10) & mid(created_time, 12, 8), 'YYYY-MM-DDhh:mm:ss') as Feed_created_time_qvdatetime,
	    date#(subfield(created_time, 'T', 1), 'YYYY-MM-DD') as Feed_created_time_qvdate,
	    time#(subfield(created_time, 'T', 2), 'hh:mm:ss+0000') as Feed_created_time_qvtime,
	    description as Feed_description,
	    from_name as Feed_from_name,
	    link as Feed_link,
	    message as Feed_message,
	    // TODO: Need message URL encoded version of this.
	    name as Feed_name,
	    object_id as Feed_object_id,
	    picture as Feed_picture,
	    shares as Feed_shares,
	    status_type as Feed_status_type,
	    to_id as Feed_to_id,
	    to_name as Feed_to_name,
	    type as Feed_type,
	    updated_time as Feed_updated_time,
	    timestamp#(mid(updated_time, 1, 10) & mid(updated_time, 12, 8), 'YYYY-MM-DDhh:mm:ss') as Feed_updated_time_qvdatetime,
	    date#(subfield(updated_time, 'T', 1), 'YYYY-MM-DD') as Feed_updated_time_qvdate,
	    time#(subfield(updated_time, 'T', 2), 'hh:mm:ss+0000') as Feed_updated_time_qvtime,
	    total_likes as Feed_total_likes,
	    total_comments as Feed_total_comments
	FROM
	[$(vUrl)]
	(qvx);
	// IMPORTANT: If, when loading the above script, you receive a 'Script Error' Dialog box with a 'Field Not Found'
	// (or other) error, the first thing you should do is copy and paste the full request URL (i.e. the URL between the square [...]
	// brackets IN THE QLIKVIEW / QLIK SENSE SCRIPT ERROR DIALOG) into a browser address bar and check the response.
	next
	
trace 'Establishing number of feed items with comments to load in this run...';

FB_FeedItemsWithCommentsLoadedInThisRun:
load
page as FB_FeedItemsLoadedInThisRun_page,
FeedItem_id as FB_FeedItemsLoadedInThisRun_id,
Feed_total_comments as FB_FeedItemsLoadedInThisRun_total_comments
resident
FB_Feed
where Feed_total_comments > 0;

if not isnull(size_fb_pro_feed) then	
	FB_Feed:
	LOAD * FROM '$(fb_pro_feed)' (qvd)
	where not exists (FeedItem_id);
endif	

STORE FB_Feed INTO '$(fb_pro_feed)';
	 
if vDeleteTempTables = 1 then
	drop table temp_pagesID;
endif
///$tab Comments
LET noRows = NoOfRows('FB_FeedItemsWithCommentsLoadedInThisRun');
	for i=0 to $(noRows)-1
		
	let feedID = peek('FB_FeedItemsLoadedInThisRun_id', $(i), 'FB_FeedItemsWithCommentsLoadedInThisRun');
	let page = peek('FB_FeedItemsLoadedInThisRun_page', $(i), 'FB_FeedItemsWithCommentsLoadedInThisRun');
	
	let vUrl = '$(vQwcBaseUrl)&connectorID=FacebookFanPagesConnector&table=CommentsAndRepliesForItem&objectId=$(feedID)';
	trace 'About to run $(vUrl)';
						
	TempCommentAndReplies:
	LOAD
		'$(vNow)' as CommentsAndRepliesForItem_loaddate,
		timestamp(now(1)) as CommentsAndRepliesForItem_loadtimestamp,
		'$(feedID)' as FeedItem_id,
	    id as CommentsAndRepliesForItem_id,
	    from_id as CommentsAndRepliesForItem_from_id,
	    created_time as CommentsAndRepliesForItem_created,
	    timestamp#(mid(created_time, 1, 10) & mid(created_time, 12, 8), 'YYYY-MM-DDhh:mm:ss') as CommentsAndRepliesForItem_created_time_qvdatetime,
	    date#(subfield(created_time, 'T', 1), 'YYYY-MM-DD') as CommentsAndRepliesForItem_created_time_qvdate,
	    time#(subfield(created_time, 'T', 2), 'hh:mm:ss+0000') as CommentsAndRepliesForItem_created_time_qvtime,
	    from_name as CommentsAndRepliesForItem_from_name,
	    message as CommentsAndRepliesForItem_message,
		'Not yet implemented' as CommentsAndRepliesForItem_message_urlEncoded,
	    // TODO: Need message URL encoded version of this.
	    parent_id as CommentsAndRepliesForItem_parent_id,
	    comment_count as CommentsAndRepliesForItem_comment_count,
	    like_count as CommentsAndRepliesForItem_like_count
	FROM
	[$(vUrl)]
	(qvx);
	// IMPORTANT: If, when loading the above script, you receive a 'Script Error' Dialog box with a 'Field Not Found'
	// (or other) error, the first thing you should do is copy and paste the full request URL (i.e. the URL between the square [...]
	// brackets IN THE QLIKVIEW / QLIK SENSE SCRIPT ERROR DIALOG) into a browser address bar and check the response.

next

FB_Comments:
LOAD	
	CommentsAndRepliesForItem_loaddate as Comment_loaddate,
	//Comment_page, // Needed for AllContent table. Not really the right way to use rowKey but works for us in this instance.
	CommentsAndRepliesForItem_loadtimestamp,
	FeedItem_id,
	CommentsAndRepliesForItem_created,
	CommentsAndRepliesForItem_id as Comment_id,
	CommentsAndRepliesForItem_from_id as Commenter_id,
	CommentsAndRepliesForItem_from_name as Comment_user_name,
	CommentsAndRepliesForItem_message as Comment_message,
	CommentsAndRepliesForItem_message_urlEncoded as Comment_message_urlEncoded,
	CommentsAndRepliesForItem_like_count as Comment_like_count,
	CommentsAndRepliesForItem_comment_count as Comment_reply_count//,
	//'' as 'InReplyToCommentId',
	//'false' as Comment_isReplyToComment
resident TempCommentAndReplies
where CommentsAndRepliesForItem_parent_id = '';

FB_Replies:
LOAD	
	CommentsAndRepliesForItem_parent_id as Comment_id,
	CommentsAndRepliesForItem_loaddate as Reply_loaddate,
	//Comment_page, // Needed for AllContent table. Not really the right way to use rowKey but works for us in this instance.
	CommentsAndRepliesForItem_loadtimestamp as Reply_loadtimestamp,
	// FeedItem_id,
	CommentsAndRepliesForItem_created as Reply_created,
	CommentsAndRepliesForItem_id as Reply_id,
	CommentsAndRepliesForItem_from_id as Replier_id,
	CommentsAndRepliesForItem_from_name as Replier_user_name,
	CommentsAndRepliesForItem_message as Reply_message,
	CommentsAndRepliesForItem_message_urlEncoded as Reply_message_urlEncoded,
	CommentsAndRepliesForItem_like_count as Reply_like_count,
	CommentsAndRepliesForItem_comment_count as Reply_comment_count//,
	//0 as 'Comment_count',
	//CommentsAndRepliesForItem_parent_id as 'InReplyToCommentId',
	//'true' as Comment_isReplyToComment
resident TempCommentAndReplies
where CommentsAndRepliesForItem_parent_id <> '';


drop table TempCommentAndReplies;

let fb_pro_comments = 'FB_Comments.qvd';
let size_fb_pro_comments = filesize('$(fb_pro_comments)');

//
// Store comments
//
if not isnull(size_fb_pro_comments) then	
	FB_Comments:
	LOAD * FROM '$(fb_pro_comments)' (qvd)
	WHERE NOT EXISTS (Comment_id);
endif	
	
if not isnull(TableNumber('FB_Comments')) then
	STORE FB_Comments INTO '$(fb_pro_comments)';
endif

//
// Store replies
//
let fb_pro_replies = 'FB_Replies.qvd';
let size_fb_pro_replies = filesize('$(fb_pro_replies)');

if not isnull(size_fb_pro_replies) then	
	FB_Replies:
	LOAD * FROM '$(fb_pro_comments)' (qvd)
	WHERE NOT EXISTS (Reply_id);
endif	
	
if not isnull(TableNumber('FB_Replies')) then
	STORE FB_Replies INTO '$(fb_pro_replies)';
endif

if vDeleteTempTables = 1 then
	drop table FB_FeedItemsWithCommentsLoadedInThisRun;
endif

exit script;
