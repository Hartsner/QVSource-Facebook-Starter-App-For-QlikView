// --------------------------------------------------------------------------------------------------------
// THE FOLLOWING SHOULD BE REVIEWED BEFORE RELOADING THIS APPLICATION
// --------------------------------------------------------------------------------------------------------

// ***********************************************************************
// IMPORTANT - The folder you specify here must exist and QlikView should 
// have write access to it and QVSource should have read access
// ***********************************************************************
//
// A folder which QlikView has write access to and QVSource has read access 
// to. See http://www.qvsource.com/wiki/Synchronous-Asynchronous-And-Batch-Requests-Explained.ashx 
// for more info.
//
let vWorkingFolder = 'c:\QVSource\Temp\';

//
// An identifier for the app - used for error logging. Should be 
// unique across all QVSource documents reloading on a given machine.
//
let vQVSourceAppId = 'FacebookDemo';

//
// Edit the following table so that the left column contains the 
// FB page name or id and the right column contains a friendly name
// to be used in charts.
//
// NOTE: We would stongly recommend looking up the underlying ID for 
// the page (although we don't in the example below) for the page 
// column below rather than using the page's 'vanity url' name which 
// can sometimes change. For example, let's say you wish to analyse:
// www.facebook.com/cocacola
//
// Instead of entering 'cocacola' in the table below, enter this into the
// page name/id input in QVSource then look at the 'Page' table on the 
// Data tab. You should see in the page_id column the value 40796308305
// and this should be used for the page column in the table below.
//
// You should read the docs here:
// http://www.qvsource.com/wiki/Facebook-Pages-Connector-for-QlikView.ashx#Facebook_Name_or_Page_Id_0
// when working out what to enter for the page field.
//
// If applicable, the first row should be your own company's page (it is used to set the 
// vCompany variable which may be used to highlight lines in certain charts in the future).
//
FacebookSites:
LOAD * INLINE [
page, Site
internetexplorer, IE
googlechrome, Chrome
Firefox, Firefox
];

//
// The first time the app is loaded (i.e. when there are no saved QVD files) it will go back from 
// the current day this many days and retrieve all the feed items. Note that if the facebook fan 
// page has a lot of activity then it can be very slow to load the further back you set this.
//
let vNoDaysToGoBackOnInitialReload = 1;

//
// After the first reload (i.e. when there are some saved QVD files) we still want to go back a short 
// time to pick up any new comments, likes etc. for posts that may have changed since the previous loads.
// This variable sets how many days we go back refeshing feed items and associated comments for.
//
let vNoDaysToGoBackOnSubsequentReloads = 1;

//
// There could be hundreds of comments on each facebook post - this value sets the maximumn number of comments
// to retrieve per post. Note that the more you retrieve the slower the reload will be.
//
// Please note that the data for each feed item actually contains a field with the total number of comments for the 
// post which can be used for charting so unless you actually require the text, like count and other comment specific 
// text you could set this to 0.
//
let vNoOfCommentsToLoadPerFeedItem = 10;

//
// Configure this table with one or more of the following sentiment APIs:
//
// Repustate
// Sentiment140
// AlchemyAPI
// Random
// *Saplo 
// *Viralheat
// *Chatterbox
// * NOT SUPPORTED IN THIS VERSION (1.8.5+ OF QVW / 1.4.0.4+ OF QVSOURCE)) We will endeavour to add support back for these 
// soon but it should be straightforward to adjust the load script to support these.
//
// NOTE:
// - You may need to ensure you have API keys configured in QVSource for the selections you make here with 
// enough quota to be able to score all the content.
// - The QVSource Sentiment Analysis & Text Analytics Connector also connects to other APIs which you can 
// of course also use however you would need to modify the load script accordingly.
//
SentimentAPIs:
LOAD * INLINE [
SentimentAPI
Random
Repustate
];

//
// Enter something like: GMT, GMT-01:00, GMT+04:00 etc. here.
//
// If this does not work try something like: UTC, UTC+01:00 etc.
//
let vLocalTimeZone = 'UTC';

//
// Used to change for example the port number if you are using QVSource on a non standard port.
//
let vQVSourceBaseUrl = 'http://localhost:5555';    

// --------------------------------------------------------------------------------------------------------
// THE FOLLOWING ARE INTENDED FOR ADVANCED USE ONLY
// --------------------------------------------------------------------------------------------------------

let vUseAsyncWherePossible = 1;
let vAsyncSentiment = vUseAsyncWherePossible; // should be 0 or 1.
let vAsyncComments = vUseAsyncWherePossible; // should be 0 or 1.

// let vAsyncKey = hash128(documentpath()) & '_FacebookApp'; no longer needed/used.

//
// Set a default to email address at the application level.
//
// IMPORTANT - If you do set this you should also setup details of an SMTP
// account in the notifier connector.
//
let VEmailNotificationAddress = ''; // 'username@domain.com';

//
// By default the application will not attempt to download additional profile data on all users who 
// have written a post or commented on a post.
//
// The main advantage of turning this on is that you will get additional data for all the posters and 
// commenters in the data set. HOWEVER users generally have very little information publicly available 
// and likely the only additional information you will get by turning this on is their gender and locale 
// and getting these will GREATLY increase the load time.
//
// With this turned off only a couple of gender and locale related charts in the demo app will not be 
// available.
//
let vLoadPostersAndCommenterInfo = 0;
let vLoadPostersAndCommenterInfoAsync = vUseAsyncWherePossible; // should be 0 or 1.

//
// Colours for sentiment charts.
//
let vColNeg = 'RGB(255, 0, 0)';
let vColPos = 'RGB(0, 255, 0)';
let vColNeu = 'RGB(0, 0, 255)';

//
// If this is set to 1, the data will be refreshed 
// each new day the script is reloaded and all the tables for 
// that day will be stored to QVDs.
//
let vGetLatestData = 1;

//
// This should be used during debugging only. It will prevent the cache of comments for feed items and the
// details for a page from being cleared and should significantly improve reload time however it will no 
// longer be retrieving new data!
//
let vClearCacheBeforeReload = 1;

//
// Whether to delete temporary tables used during the load process. It is recommended that you leave this 
// set to 1 unless you have some issues with the application or wish to understand it better.
//
let vDeleteTempTables = 1;

//
// Turns on some rough working sheets.
//
let vShowScrapSheets = 0;
